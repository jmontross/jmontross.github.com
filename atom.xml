<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[A hacker's attempt to document the journey]]></title>
  <link href="http://jmontross.github.com/atom.xml" rel="self"/>
  <link href="http://jmontross.github.com/"/>
  <updated>2014-01-02T19:06:08-08:00</updated>
  <id>http://jmontross.github.com/</id>
  <author>
    <name><![CDATA[Joshua Montross]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[adding a newsletter to wordpress]]></title>
    <link href="http://jmontross.github.com/blog/2014/01/02/adding-a-newsletter-to-wordpress/"/>
    <updated>2014-01-02T18:59:00-08:00</updated>
    <id>http://jmontross.github.com/blog/2014/01/02/adding-a-newsletter-to-wordpress</id>
    <content type="html"><![CDATA[<p>I found some sweet <a href="http://wordpress.org/plugins/newsletter/">newsletter software</a> and added it to my wordpress.</p>

<p>Downloaded the file from there..</p>

<pre><code>scp /Users/josh/Downloads/newsletter.zip root@192.81.131.92:/var/www/josh/wp-content/plugins

ssh root@192.81.131.92
cd /var/www/josh/wp-content/plugins
unzip newsletter
</code></pre>

<p>Then I go into my wordpress panel and activate the plugin.  Super easy!</p>

<p>The next problem is that when I subscribe it doenst really send the email.</p>

<pre><code>sudo apt-get install sendmail
</code></pre>

<p>Now it sends email but it ends up in the spam folder&#8230; How do I fix this one?</p>

<p>Looks like I&#8217;ll get that one next time&#8230; in the mean time, feel free to read my blog at <a href="http://www.joshuamontross.com">joshuamontross.com</a> and subscribe to the newsletter :)  Be sure to check your spam folder for now&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how to run facebook app locally with one set of keys]]></title>
    <link href="http://jmontross.github.com/blog/2013/12/12/how-to-run-facebook-app-locally-with-one-set-of-keys/"/>
    <updated>2013-12-12T12:26:00-08:00</updated>
    <id>http://jmontross.github.com/blog/2013/12/12/how-to-run-facebook-app-locally-with-one-set-of-keys</id>
    <content type="html"><![CDATA[<p>https://pagekite.net/support/quickstart/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to implement captcha on 100 php contact pages in one script using ruby]]></title>
    <link href="http://jmontross.github.com/blog/2013/12/12/how-to-update-100-websites-contact-pages-at-once/"/>
    <updated>2013-12-12T11:56:00-08:00</updated>
    <id>http://jmontross.github.com/blog/2013/12/12/how-to-update-100-websites-contact-pages-at-once</id>
    <content type="html"><![CDATA[<p>The assignment:  Can you update 100+ websites contact pages with a captcha form so I stopped getting spammed?</p>

<p>The solution:  Create a new contact.php file with captcha implemented, check to see if the sites contact.php matches the first one I looked at, if it is the same, swap the new contact file for the old and keep a running list of how many you&#8217;ve updated.</p>

<p>This is a ruby script that implements the solution above in real code.  The files described in the file are provided at the end in a bit of a redacted form.</p>

<pre><code>require 'fileutils'

f
ilures = []
successes = []

Dir.entries('/home3/northas0/public_html').each do |directory|

  if Dir.exists?("/home3/northas0/public_html/#{directory}") &amp;&amp; Dir.chdir
  "/home3/northas0/public_html/#{directory}")
    if system('diff contact.php ../library/contact_old.php')
    then
      FileUtils.cp('../library/contact.php',"/home3/northas0/public_html/#{directory}/contact.php")
      puts "contact.php replaced at /home3/northas0/public_html/#{directory}/contact.php"
      successes &lt;&lt; directory
    else
      puts "failed to replace contact.php differences in /home3/northas0/public_html/#{directory}"
      failures &lt;&lt; directory
    end
  end

  end
puts "there were #{successes.length} files replaced"
puts "failed directories #{failures}"
puts "success at #{successes}"
</code></pre>

<p><a href="https://gist.github.com/jmontross/bc382af5340ea3eb4e1f">Here&#8217;s the scripts</a></p>

<p>The key is that I reused the contact.php logic and implemented using a recaptcha account for more than one domain. To do this just check the box when creating your <a href="https://developers.google.com/recaptcha/intro">recaptcha account</a></p>

<p>You can even <a href="https://developers.google.com/recaptcha/docs/customization">customize recaptcha</a></p>

<p>Thanks.  Hope it was helpful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[installing wordpress on a linode ubuntu with nginx]]></title>
    <link href="http://jmontross.github.com/blog/2013/08/10/installing-wordpress-on-a-linode-ubuntu-with-nginx/"/>
    <updated>2013-08-10T16:38:00-07:00</updated>
    <id>http://jmontross.github.com/blog/2013/08/10/installing-wordpress-on-a-linode-ubuntu-with-nginx</id>
    <content type="html"><![CDATA[<p>I need mysql.</p>

<pre><code>apt-get install mysql-client-core-5.5
</code></pre>

<p>follow the dialogs.  create a root user and password. remember the password.</p>

<p>Go ahead and log into the MySQL Shell:</p>

<pre><code>mysql -u root -p

CREATE DATABASE wordpress;
CREATE USER wordpressuser@localhost;
Query OK, 0 rows affected (0.00 sec)
# use a different password below....
SET PASSWORD FOR wordpressuser@localhost= PASSWORD("password");
=&gt; Query OK, 0 rows affected (0.00 sec)
# stays as password.  this is the column name password... not your password
GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost IDENTIFIED BY 'password';
=&gt; Query OK, 0 rows affected (0.00 sec)
FLUSH PRIVILEGES;
</code></pre>

<p>install php</p>

<pre><code>sudo apt-get install php5-fpm
</code></pre>

<p>Get wordpress</p>

<p>cd ~/
wget http://wordpress.org/latest.tar.gz
tar -xzvf latest.tar.gz
cp wordpress/wp-config-sample.php wordpress/wp-config.php</p>

<p>Install php5-mysql:</p>

<pre><code>sudo apt-get install php5-mysql
</code></pre>

<p>meh.  I&#8217;m bored.  followed these tutorials below mostly.</p>

<p>https://www.digitalocean.com/community/articles/initial-server-setup-with-ubuntu-12-04
https://www.digitalocean.com/community/articles/how-to-install-wordpress-with-nginx-on-ubuntu-12-04
https://www.digitalocean.com/community/articles/how-to-install-linux-nginx-mysql-php-lemp-stack-on-ubuntu-12-04</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[golang nginx and sinatra style with pat]]></title>
    <link href="http://jmontross.github.com/blog/2013/08/10/golang-nginx-and-sinatra-style-with-pat/"/>
    <updated>2013-08-10T15:18:00-07:00</updated>
    <id>http://jmontross.github.com/blog/2013/08/10/golang-nginx-and-sinatra-style-with-pat</id>
    <content type="html"><![CDATA[<p>Go looks to be a promising language for writing fast code.  Why?  It was designed from ground up to handle the big problems like concurrency, race conditions, and fast compilation.  It&#8217;s almost like an interpretted language but it&#8217;s much closer to the metal.  Enough rambling.</p>

<p>Will set up a really simple web server with golang on ubuntu server running nginx.  Assumes you&#8217;ve got nginx setup which is covered in a previous post for running sinatra and nginx.</p>

<p>first ssh into server</p>

<pre><code>apt-get install golang-go
</code></pre>

<p>make sure you click yes and get the language installed</p>

<pre><code>cd /opt/awesome/go
go get github.com/bmizerany/pat
</code></pre>

<p>There is some example code on https://github.com/bmizerany/pat that I&#8217;ve copied below</p>

<pre><code>package main

import (
    "io"
    "net/http"
    "github.com/bmizerany/pat"
    "log"
)

// hello world, the web server
func HelloServer(w http.ResponseWriter, req *http.Request) {
    io.WriteString(w, "hello, "+req.URL.Query().Get(":name")+"!\n")
}

func main() {
    m := pat.New()
    m.Get("/hello/:name", http.HandlerFunc(HelloServer))

    // Register this pat with the default serve mux so that other packages
    // may also be exported. (i.e. /debug/pprof/*)
    http.Handle("/", m)
    err := http.ListenAndServe(":12345", nil)
    if err != nil {
        log.Fatal("ListenAndServe: ", err)
    }
}
</code></pre>

<p>Basically the above code is running a webserver on port 12345 of the localhost and will respond to http get requests at /hello</p>

<p>To run this code we can touch a file called go.go and copy the above into said file and save it.
Now run the file in the background.</p>

<pre><code> go run go.go &amp;
</code></pre>

<p>Test that it works.</p>

<pre><code> curl -X GET localhost:12345/hello/foo
 hello, foo!
</code></pre>

<p>Cool, it works.    Maybe see if it responds to posts.</p>

<pre><code> root@joshuamontross:/opt/awesome/go# curl -X POST localhost:12345/hello/foo
 Method Not Allowed
</code></pre>

<p>That&#8217;s nice.  Error handling works.  Now let&#8217;s make nginx serve this page by modifying the awesome config file.</p>

<p>All needs to be added to the location block is the following proxy pass to localhost on the port specified in our program.</p>

<pre><code>open up the nginx file in sites available.

sudo vi /etc/nginx/sites-available/awesome

add in the new /hello route.

server {
    #listen   80; ## listen for ipv4; this line is default and implied
    #listen   [::]:80 default ipv6only=on; ## listen for ipv6

    # Make site accessible from http://localhost/
    server_name localhost;
    ## make it so we can do curl -X GET localhost/hello/foo

    location /ga/circles {
      alias /usr/share/nginx/www/ga/circles;
    }

    location /hello {
      proxy_pass http://localhost:12345/hello;
    }

    location /sinatra {
      proxy_pass http://localhost:4567/;
    }
}
</code></pre>

<p>Save and exit&#8230; &#8220;:wq&#8221; in vim.  And restart nginx</p>

<pre><code>sudo service nginx restart
</code></pre>

<p>Now the site should work from straight localhost without a port being specified since nginx will serve on localhost and proxy pass to our site&#8230;.</p>

<pre><code>curl -X GET localhost/hello/foobar
hello, foobar!
</code></pre>

<p>That worked nicely.  visiting joshuamontross.com/hello/whatever</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how to host sinatra on nginx using linode]]></title>
    <link href="http://jmontross.github.com/blog/2013/07/25/how-to-host-sinatra-on-nginx-using-linode/"/>
    <updated>2013-07-25T19:56:00-07:00</updated>
    <id>http://jmontross.github.com/blog/2013/07/25/how-to-host-sinatra-on-nginx-using-linode</id>
    <content type="html"><![CDATA[<p>here&#8217;s how i got a sinatra app up using nginx and an ununtu on linode with godaddy ( apologies for indirectly supporting laws that restrict freedom ).  What follows is my command line history from the moment I purchased my linode until I had sinatra serving some files with the help of nginx.</p>

<pre><code>1  ls
2  pwd
3  ruby -v
4  sudo apt-get install ruby1.9.1
5  sudo apt-get install nginx
6  sudo mkdir /opt/awesome
7  cd /opt/awesome/
8  touch sin.rb
9  gem install sinatra
10  add-apt-repository ppa:nginx/stable
11  apt-get install python-software-properties
12  echo "joshuamontross.com" &gt; /etc/hostname
13  hostname -F /etc/hostname
</code></pre>

<p>Now update apt-get and install nginx</p>

<pre><code>14  apt-get update
15  apt-get upgrade --show-upgraded
16  apt-get install nginx
17  sudo /etc/init.d/nginx start
18  curl http://localhost:80
19  ls
20  vi sin.rb
21  ruby sin.rb
22  ruby sin.rb &amp;
23  ls
24  vi sin.rb
25  sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/awesome
26  sudo vi /etc/nginx/sites-available/awesome
</code></pre>

<p>this is what my awesome looks like&#8230;.</p>

<pre><code> server {
    #listen   80; ## listen for ipv4; this line is default and implied
    #listen   [::]:80 default ipv6only=on; ## listen for ipv6

    root /usr/share/nginx/www;
    index index.html index.htm;

    # Make site accessible from http://localhost/
    server_name localhost;

          location /ga/circles {
               alias /usr/share/nginx/www/ga/circles;
          }

          location /sinatra {
      # First attempt to serve request as file, then
      # as directory, then fall back to index.html
                  proxy_pass http://localhost:4567/;
                  #try_files $uri $uri/ /index.html;
      # Uncomment to enable naxsi on this location
      # include /etc/nginx/naxsi.rules
    }
  }
</code></pre>

<p>Now restart nginx.</p>

<pre><code>28  sudo /etc/init.d/nginx restart
</code></pre>

<p>Site should be up at our port directly hitting sinatra and via hitting nginx at localhost</p>

<pre><code>29  curl http://localhost:4567
=&gt; oooooh yeah &lt;br /&gt; ... maybe you want my "portfolio" site at &lt;a href="http://www.pointmanj.com"&gt; pointmanj.com &lt;/a&gt;

curl http://localhost
=&gt; oooooh yeah &lt;br /&gt; ... maybe you want my "portfolio" site at &lt;a href="http://www.pointmanj.com"&gt; pointmanj.com &lt;/a&gt;
</code></pre>

<p>symlink the available site to sites-enabled.</p>

<pre><code>33  sudo ln -s /etc/nginx/sites-available/awesome /etc/nginx/sites-enabled/awesome
34 ls -la  /etc/nginx/sites-enabled/

lrwxrwxrwx 1 root root   34 May  9 03:49 awesome -&gt; /etc/nginx/sites-available/awesome
</code></pre>

<p>Remove default nginx file.</p>

<pre><code>35  sudo rm -rf /etc/nginx/sites-enabled/default
36  sudo /etc/init.d/nginx restart
</code></pre>

<p>Make sure to log into godaddy, namecheap, or whatever you used to buy your domain and create an @record to the ip of your server.  In godaddy this is under domain management and dns zone file.</p>

<p><img class="center" src="http://jmontross.github.com/images/godaddy_linode.png" width="1000" height="1000" title="image" alt="images"></p>

<p>This may take a little bit to propogate through the interwebs&#8230;.</p>

<p>Now the site is being served at /sinatra, which is joshuamontross.com/sinatra</p>

<p>I&#8217;d like to get a rails site up, but first I&#8217;ll need git.</p>

<pre><code>37  sudo apt-get install git
</code></pre>

<p>Now to get my rails app.</p>

<pre><code>39  git clone git@github.com:jmontross/karmagrove.git
</code></pre>

<p>This will have to be another post&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[go vs node vs other hotness]]></title>
    <link href="http://jmontross.github.com/blog/2013/06/04/go-vs-node-vs-other-hotness/"/>
    <updated>2013-06-04T20:42:00-07:00</updated>
    <id>http://jmontross.github.com/blog/2013/06/04/go-vs-node-vs-other-hotness</id>
    <content type="html"><![CDATA[<p>I think go is going to be an interesting language that will grow beyond its current usage</p>

<p>http://jobstractor.com/monthly-stats</p>

<p>http://www.langpop.com/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Teaching Lessons Learned at GA]]></title>
    <link href="http://jmontross.github.com/blog/2013/06/04/teaching-lessons-learned-at-ga/"/>
    <updated>2013-06-04T18:13:00-07:00</updated>
    <id>http://jmontross.github.com/blog/2013/06/04/teaching-lessons-learned-at-ga</id>
    <content type="html"><![CDATA[<p>Taught a course on git /github and use of github pages on a Tuesday followed by css transitions and transformations.</p>

<p>First off we got everyone to install git.. everyone with mac osx 10.7 that is.</p>

<p>Some problems I experienced right away with git was the assumption that everyone knew how to open the application called terminal.  I slowly realized that teaching git commands on the command line was not working very well and moved towards the UI.</p>

<p>   http://cdpn.io/xJmsc</p>

<p>Forgot to cover: .gitignore, fork (in the github ui), and clone.</p>

<p>I dismissed a question on how these boxes were sliding into the screen because I was not confident in ability to solve the problem in front of class.</p>

<p>for the example with the four boxes in this code snippet, the student wanted to make the boxes slide from the right and eliminate the ugly animation from the fixed starting position.</p>

<p>Also, the difference in transition and animation could more accurately be described. transitions use pseudo-selectors, and animation sequences use keyframes.  transitions are used with hover and focus.</p>

<p>cmd+option+t gets special characters in sublime text 2.</p>

<p>When doing live coding coming from a cheat sheet - use the projection screen as a separate monitor.</p>

<p>color f00 -> all red, no green, no blue.</p>

<p>CSS transformations.  Wish I&#8217;d used animate library.
   http://daneden.me/animate/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using CSS to make circles within circles]]></title>
    <link href="http://jmontross.github.com/blog/2013/05/28/using-css-to-make-circles-within-circles/"/>
    <updated>2013-05-28T09:26:00-07:00</updated>
    <id>http://jmontross.github.com/blog/2013/05/28/using-css-to-make-circles-within-circles</id>
    <content type="html"><![CDATA[<p>The challenge Jeremiah receives from the prospective employer is to make the following image in html/css.</p>

<p><img class="center" src="http://jmontross.github.com/images/circles_challenge.png" width="350" height="350" title="image" alt="images"></p>

<p>He is allowed to ask questions of course.  How to begin?</p>

<pre><code>&lt;div class="bigcircle"&gt;

  &lt;div class="circle circle1"&gt; 1 &lt;/div&gt;

  &lt;div class="circle circle2"&gt; 2 &lt;/div&gt;

  &lt;div class="circle circle3"&gt; 3 &lt;/div&gt;

  &lt;div class="circle circle4"&gt; 4 &lt;/div&gt;

&lt;/div&gt;
</code></pre>

<p>After creating the html above we are going to need to make some styles.  The outer div is for our big circle and we have four other divs within for each of our colored circles.</p>

<p>What sort of css would we need to get the outer div to be a big circle?</p>

<p>The final result is here.</p>

<p>http://cdpn.io/xJmsc</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[general awesome]]></title>
    <link href="http://jmontross.github.com/blog/2013/05/21/general-awesome/"/>
    <updated>2013-05-21T19:34:00-07:00</updated>
    <id>http://jmontross.github.com/blog/2013/05/21/general-awesome</id>
    <content type="html"><![CDATA[<p>Lots been going on lately.  Started as dev in residence at general assembly for a front end class. Very humbling.  I&#8217;m not very great with this responsive design and and awesome css tricks.  Here&#8217;s a few things I&#8217;ve taken note of thus far.</p>

<p>clearfix is a really neat way to get divs to actually contain other divs.  normalize.css is awesome and gives you some clearfix classes you may use to apply to divs. @media allows you to watch the screen size and show different screen sizes. below are the codes used to add your own styles between the { }</p>

<pre><code>If the device supports media queries...
@media only screen {}

and it is at least 768 px...
@media only screen and (min-width: 768px) {}

@media only screen and (min-width: 1280px) {}

@media only screen and (min-width: 1440px) {}

@media only screen and (min-width: landscape) {}

@media only screen and (min-width: portrait) {}
</code></pre>

<p>python is nifty and ive really been enjoying the notebook.  the following command gets it up and running after an easy_install and/or pip_install of the notebook and pylab dependencies.</p>

<p>   ipython &#8211;pylab notebook</p>

<p>I&#8217;ve been using nodejs a bit lately, and all the things I dislike about it seem to be alleviated in this nice language invented by these fellows at google.  I&#8217;m thinking go is a better bet for a scalable system that is maintainable.  The argument that context switching is annoying doesnt hold water when weighed against performance issues.  Maybe I need some citations?  Maybe not.</p>

<p>foundation.css is awesome. the 12 column layout concept is really novel.</p>

<p>Some cool sites ive read lately and found awesome for various reasons.
  http://mediaqueri.es/
  http://worrydream.com/#
  http://harperreed.com/
  http://blogs.hbr.org/haque/2012/10/how_to_let_your_purpose_find_y.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[deploying with chef on a new mac]]></title>
    <link href="http://jmontross.github.com/blog/2013/02/22/deploying-with-chef-on-a-new-mac/"/>
    <updated>2013-02-22T14:29:00-08:00</updated>
    <id>http://jmontross.github.com/blog/2013/02/22/deploying-with-chef-on-a-new-mac</id>
    <content type="html"><![CDATA[<p>I really dislike setting up machines more than once.</p>

<p>This is my up to date steps on how I set up my new macintosh machines.</p>

<p>Whether I should have gone for anti-glare or retina display is hard enough&#8230; should I decide to switch the last thing I want to be worrying about is set up time for the new machine.</p>

<p>With the following approach, the biggest bottleneck is bandwidth.</p>

<p>https://gist.github.com/jmontross/5015950</p>

<p>If you encounter an error - which I often do - just delete the offending recipe unless you really want it.  I built the file using</p>

<p>http://www.solowizard.com/</p>

<p>Most recently it got hung up on activemq - which i subsequently removed because I don&#8217;t really need that project.  Then it got hung up on Java&#8230; which I was able to just click the package to install, and then</p>

<pre><code> bash set_up_my_machine.sh
</code></pre>

<p>Then it gets hung up on librsvg</p>

<pre><code>vi set_up_my_machine.sh
/librsvg
dd
:ew

bash set_up_my_machine.sh
</code></pre>

<p>Then it got hung up on the use of a password for mysql&#8230; so I ripped out the usage of a password at all.. I prefer my mysql unprotected.  It&#8217;s getting close&#8230;</p>

<p>That didn&#8217;t work.</p>

<p>I removed the steps that were executing commands on mysql.  I dont care about mysql timezones anyways.</p>

<p>Got hung up on skype. Rerun.</p>

<p>Works. I pushed the code to my branch at https://github.com/jmontross/pivotal_workstation</p>

<pre><code>1. installing command line tools for osx (download x-code from app store, open x-code,     preferences -&gt; downloads &gt; command line tools)
2. mkdir ~/cookbooks; cd ~/cookbooks; git clone https://github.com/opscode-cookbooks/dmg;     git clone git://github.com/jmontross/pivotal_workstation.git
3. gem install soloist
4. bash pivotal_workstation/set_up_my_machine.sh
5. wait a while
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[airpair - remote pairing with strangers for fun and profit]]></title>
    <link href="http://jmontross.github.com/blog/2013/02/22/airpair-remote-pairing-with-strangers-for-fun-and-profit/"/>
    <updated>2013-02-22T13:13:00-08:00</updated>
    <id>http://jmontross.github.com/blog/2013/02/22/airpair-remote-pairing-with-strangers-for-fun-and-profit</id>
    <content type="html"><![CDATA[<p>Recently I had the pleasure of trying out a new pairing service called airpair.co</p>

<p>I sign up for the developer path and list the host of technologies I feel comfortable philosophizing about over a pseudo-anonymous pairing service.</p>

<p>A nice chap named Jonathan contacts me and asks if I could comment on the code at this gist below</p>

<p>https://gist.github.com/anonymous/d9cb557b84a16088c64e</p>

<p>I look at it and end up thinking I could add some value there.  There is a fat controller, and I can only imagine what the model and routes are - and because I&#8217;d like to see this model and routes file I suggest I could add some value.</p>

<p>Somehow I find myself doing a google hangout with two strangers discussing a rails controller and how we may go about refactoring it.  We all agree it is a bit of a mess - just too much going on.  How do we improve it?</p>

<p>One thing we begin to notice is that the methods / controller actions are not always mapped to routes and appear to be doing things to the model.  For instance, there is a controller method like so</p>

<pre><code>def event_list
    @events = current_company.events
    @communication = if params[:communication_id].to_i &gt; 0
      current_company.communications.find(params[:communication_id])
    else
      Communication.new
    end
    render layout: false
end
</code></pre>

<p>The above could easily become a method on the communications model.</p>

<p>Then we thought about the idea of creating a new controller that is subclassed from communications.  This is useful because these actions do seem to be acting on a different type of a communication.  We went through and played around with making the communications a little more restful, and it was a fun experience I&#8217;d love to do again.  Next time I think I&#8217;d like to use some tmux and actually dig into the code together&#8230; similar to how we did earlier <a href="http://jmontross.github.com/blog/2013/02/21/pairing-with-tmux-and-rspec-on-aws-ec2-instance/"> here </a></p>

<p>Modified controller => https://gist.github.com/anonymous/ce917ac4867b7de57bc9</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pairing with tmux and rspec on aws ec2 instance]]></title>
    <link href="http://jmontross.github.com/blog/2013/02/21/pairing-with-tmux-and-rspec-on-aws-ec2-instance/"/>
    <updated>2013-02-21T13:42:00-08:00</updated>
    <id>http://jmontross.github.com/blog/2013/02/21/pairing-with-tmux-and-rspec-on-aws-ec2-instance</id>
    <content type="html"><![CDATA[<p>I wanted to pair with my friend who sat down next to me&#8230; each of us on our own laptop, but none of the gear that makes it easy for us to actually pair in the sense of two keyboards one screen.  I luckily have already burned through my AWS free tier and keep around an ubuntu server for playing/learning.  I ask my friend if he has ever used vim?  He says no.  Is he interested in pair programming on a server using vim and tmux, and he says sure. Thanks Dan for being such a good sport.</p>

<p>I ssh into my machine</p>

<pre><code>useradd dan
password: secret

sudo vi /etc/ssh/sshd_config
:s/PasswordAuthentication no/PasswordAuthentication yes/
:wq

sudo /etc/init.d/sshd reload
</code></pre>

<p>sweet.  now dan can login.  I want him to be able to share a vim window where we can view a test suite and the code split panel.  How do I do that I wonder?</p>

<pre><code> ## specify the name of your tmux socket with -S when creating it
 tmux -S /tmp/pair
 # chmod to allow other users to access it
 chmod 777 /tmp/pair
</code></pre>

<p>Now I&#8217;ve got my tmux going, dan is in terminal, and I want to share our screen.</p>

<pre><code> # now the other user can connect with
 tmux -S /tmp/pair attach
</code></pre>

<p>Awesome.  I cd into ~/home/dan and make a directory where we can do the fizzbuzz problem using tdd.  This next step assumes you&#8217;ve got rubygems on your system and</p>

<pre><code> mkdir fizzbuzz
 cd fizzuzz
 mkdir spec
 touch spec/fizzbuzz_spec.rb
 touch fizzbuzz.rb

 echo "rspec" &gt;&gt; Gemfile
 bundle
 =&gt; installing rspec....
 rspec
</code></pre>

<p>0 tests and time to get started&#8230;  Where do we start?</p>

<pre><code> vi .
 ctrl+wv
</code></pre>

<p>now we&#8217;ve got two windows each with directory open like so &#8230;</p>

<p>Imagine there&#8217;s an image here&#8230;</p>

<p>I make a test in the fizzbuzz_spec.rb file</p>

<pre><code>require 'rspec'
require './fizzbuzz'

describe FizzBuzz do
  it "should instantiate" do
    FizzBuzz.new.class == FizzBuzz
  end
end
</code></pre>

<p>We need to save it&#8230;</p>

<pre><code>:wq
</code></pre>

<p>we need to run tests</p>

<pre><code>:! rspec
</code></pre>

<p>Its a nice workflow&#8230; it works&#8230;.</p>

<p>sources: http://readystate4.com/2011/01/02/sharing-remote-terminal-session-between-two-users-with-tmux/</p>

<p>http://stackoverflow.com/questions/8339912/allowing-users-to-ssh-to-an-ec2-ubuntu-instance</p>

<p>http://pivotallabs.com/how-we-use-tmux-for-remote-pair-programming/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[setting up ubuntu 12.04 LTS using vagrant]]></title>
    <link href="http://jmontross.github.com/blog/2013/02/19/setting-up-ubuntu-12-dot-04-lts-using-vagrant/"/>
    <updated>2013-02-19T11:06:00-08:00</updated>
    <id>http://jmontross.github.com/blog/2013/02/19/setting-up-ubuntu-12-dot-04-lts-using-vagrant</id>
    <content type="html"><![CDATA[<p>So I have some code that runs nginx and node, but I&#8217;d like to do this in a vm because my mac doesnt quite run the exact same as the production ubuntu.  Since development is production I&#8217;d like replicable steps to make a VM on a local machine and run our nginx/node app.  There are two ways to go about this once we decide to use vagrant.</p>

<ol>
<li>Use standard boxes already built from isos and publicly avaiable in .box format</li>
<li>Make our own .box with custom settings from an iso at official http://www.ubuntu.com/download/server</li>
</ol>


<p>We can use use an out of the box available VM from http://www.vagrantbox.es/
Let&#8217;s go down this route and save the custom ubuntu precise for another day.</p>

<pre><code> vagrant box add ubuntu-12-04-daily http://cloud-images.ubuntu.com/precise/current/precise-server-cloudimg-vagrant-i386-disk1.box
</code></pre>

<p>You&#8217;ll have to wait 10 to 20 minutes if you&#8217;ve got reasonably fast internet
vagrant init
modify vagrant file to have</p>

<pre><code>config.vm.box = "ubuntu-12-04-daily"
config.vm.forward_port 443, 6666
config.vm.forward_port 80, 8080
</code></pre>

<p>Now save and close that vagrant file
If you are interested in the port forwarding read http://docs.vagrantup.com/v1/docs/config/vm/forward_port.html
Otherwise, back to the command line to get inside this new VM.</p>

<pre><code>vagrant up
vagrant ssh
</code></pre>

<p>now you are inside the virtual machine and should see vagrant@vagrant-ubuntu-precise-32</p>

<pre><code>sudo apt-get install nginx
sudo ngnix
</code></pre>

<p>Then browse to http://0.0.0.0:8080/ and we see Welcome to Nginx!</p>

<p>Now I want to have node and mongo&#8230;  I use this code</p>

<pre><code>wget https://raw.github.com/punkave/stagecoach/master/sc-proxy/install-node-and-mongo-on-ubuntu.bash
sudo bash install-node-and-mongo-on-ubuntu.bash
</code></pre>

<p>So I did this because I wouldnt mind having the latest&#8230; but I&#8217;d also like to build from the trustworthy source.  http://www.ubuntu.com/download/server</p>

<p>I got a file called ubuntu-12.04.2-server-amd64.iso</p>

<pre><code>mv -f ~/Downloads/ubuntu-12.04.2-server-amd64.iso ~/code/vms
</code></pre>

<p>Then I add a new vm using virtualbox and configure it to use this iso as a cd drive.  I created a vm called ubuntu12.04, and this is the same name I gave it on the network.  I gave it a user called vagrant and a password called password&#8230; When I boot up it works!</p>

<p>I follow some steps from here http://pyfunc.blogspot.com/2011/11/creating-base-box-from-scratch-for.html</p>

<pre><code>sudo apt-get install build-essential
sudo apt-get install ruby1.8
curl -L https://get.rvm.io | bash -s stable --ruby
source /hom/vagrant/.rvm/scripts/rvm


got a key from here ... https://raw.github.com/mitchellh/vagrant/master/keys/vagrant.pub
</code></pre>

<p>I realize this file is bad&#8230; this is the good one . 4 keys -</p>

<pre><code>http://docs.vagrantup.com/v1/docs/base_boxes.html

1 VirtualBox Guest Additions for shared folders, port forwarding, etc.
2 SSH with key-based auth support for the vagrant user
3 Ruby &amp; RubyGems to install Chef and Puppet
4 Chef and Puppet for provisioning support
</code></pre>

<p>ADDED /opt/company-name/</p>

<p>symlinked code to there</p>

<p>created shared folder to this area.  vbox, settngs, shared folders</p>

<p>Wow - got ahead of myself. need item 1.  items 2-4 are not so hard.</p>

<pre><code>1. Run your Ubuntu Server Virtual Machine

2. From the Devices menu select Install Guest Additions.

3. Now you are supposed to have the guest additions .iso image in your virtual     machine’s CD.

4. Now you might find a problem that is the cdrom is not automatically mounted, so you need to     do one more step before starting the installation:

    $ sudo mount /dev/cdrom /media/cdrom
    block device /dev/sr0 is write-protected, mounting read-only

That will do the trick.

5. Move to the cdrom directory

    $ cd /media/cdrom/
6. When listing the contents you should see something like this:

    $ ls -la
    total 37429
    dr-xr-xr-x 4 root root     2048 2011-06-24 15:45 .
    drwxr-xr-x 3 root root     4096 2011-07-17 16:20 ..
    dr-xr-xr-x 3 root root     2048 2011-06-24 15:45 32Bit
    dr-xr-xr-x 2 root root     2048 2011-06-24 15:45 64Bit
    -r-xr-xr-x 1 root root      647 2011-01-19 14:42 AUTORUN.INF
    -r-xr-xr-x 1 root root     6966 2011-06-24 15:40 autorun.sh
    -r-xr-xr-x 1 root root     5523 2011-06-24 15:40 runasroot.sh
    -r-xr-xr-x 1 root root  7863758 2011-06-24 15:43 VBoxLinuxAdditions.run
    -r-xr-xr-x 1 root root 14665216 2011-06-24 16:44 VBoxSolarisAdditions.pkg
    -r-xr-xr-x 1 root root  9294616 2011-06-24 15:31 VBoxWindowsAdditions-amd64.exe
    -r-xr-xr-x 1 root root   278832 2011-06-24 15:24 VBoxWindowsAdditions.exe
    -r-xr-xr-x 1 root root  6199880 2011-06-24 15:25 VBoxWindowsAdditions-x86.exe
7. Now it is time to run the installation

    $ sudo ./VBoxLinuxAdditions.run
</code></pre>

<p>http://tadabborat.tumblr.com/post/7881270430/virtualbox-shared-folders-on-ubuntu-server-64bit</p>

<p>K - on to second item&#8230;</p>

<pre><code>sudo apt-get install ssh

rm -r "$(gem env gemdir)"/doc/*.
</code></pre>

<p>sources
http://pyfunc.blogspot.com/2011/11/creating-base-box-from-scratch-for.html
http://seletz.github.com/blog/2012/01/17/creating-vagrant-base-boxes-with-veewee/
http://chrisyallop.com/2012/04/customising-a-vagrant-box-with-veewee/
https://github.com/jedi4ever/veewee/commit/31133bd14b3562aa4e9479c6b964450562838602
https://www.digitalocean.com/community/articles/how-to-install-ruby-on-rails-on-ubuntu-12-04-lts-precise-pangolin-with-rvm
http://docs.rubygems.org/read/chapter/3</p>

<p>taking this a step further one day &#8230;
https://github.com/opscode/bento</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[new mac set up with chef]]></title>
    <link href="http://jmontross.github.com/blog/2013/02/15/new-mac-set-up-with-chef/"/>
    <updated>2013-02-15T18:31:00-08:00</updated>
    <id>http://jmontross.github.com/blog/2013/02/15/new-mac-set-up-with-chef</id>
    <content type="html"><![CDATA[<p>why? Because I love TDD, DRY, and rubymine shortcuts.  Pivotal did a good thing with this soloist gem, and I enjoy making use of great ideas that solve problems I have experienced.  As much fun as it is to set up my new laptop with memcached, mysql, redis, mongo, and insert_dependency_here I&#8217;ve done it enough times to realize it is not really a valuable learning experience one need repeat.</p>

<p>Problem is&#8230;. it broke?  Why?  I added some of my own custom recipes and the newest mac has issues with gcc and ruby when I wanted to use 1.8.7 as a rvm version for an older project.  Either way, This is what my little script I use looks like. I run it with bash.  I made it using http://www.solowizard.com/ and the code at https://github.com/pivotal/pivotal_workstation</p>

<p>To get chef-solo working these steps were required
had to clone pivotal_workstation and dmg into ~/cookbooks, get commands line tools from mac (http://stackoverflow.com/questions/9329243/xcode-4-4-command-line-tools), gem install soloist.  Then you are able to just run the command bash setup_my_machine&#8230;. make sure you have the recipes&#8230;. some of the ones in this list below are custom from my cookbooks repo (https://github.com/jmontross/pivotal_workstation)&#8230;</p>

<pre><code>cat ~/cookbooks/setup_my_machine.sh
#!/bin/bash
# This shell script was created at solowizard.com
#
# Usage:
#   Running the script remotely:
#     bash &lt; &lt;(curl -s http://www.solowizard.com/soloist_scripts/frsp9k.sh )
#   Running the script if you have downloaded it:
#     ./frsp9k.sh
#
# http://github.com/tommyh/solo_wizard
# (c) 2012, Tom Hallett
# This script may be freely distributed under the MIT license.

pushd `pwd`
if rvm --version 2&gt;/dev/null; then
  gem install soloist
else
  sudo gem install soloist
fi

mkdir -p ~/cookbooks; cd ~/cookbooks
cat &gt; soloistrc &lt;&lt;EOF
cookbook_paths:
- $PWD
recipes:
- pivotal_workstation::ack
- pivotal_workstation::activemq
- pivotal_workstation::add_ops_user
- pivotal_workstation::ccmenu
- pivotal_workstation::chrome
- pivotal_workstation::create_var_chef_cache
- pivotal_workstation::defaults_fast_key_repeat_rate
- pivotal_workstation::default_editor
- pivotal_workstation::dropbox
- pivotal_workstation::enable_assistive_devices
- pivotal_workstation::erlang
- pivotal_workstation::firefox
- pivotal_workstation::flycut
- pivotal_workstation::function_keys
- pivotal_workstation::git
- pivotal_workstation::github_for_mac
- pivotal_workstation::gitx
- pivotal_workstation::git_config_global_defaults
- pivotal_workstation::git_scripts
- pivotal_workstation::ghostscript
- pivotal_workstation::global_environment_variables
- pivotal_workstation::homebrew
- pivotal_workstation::heroku_toolbelt
- pivotal_workstation::imagemagick
- pivotal_workstation::increase_shared_memory
- pivotal_workstation::inputrc
- pivotal_workstation::iterm2
- pivotal_workstation::java
- pivotal_workstation::keyboard_preferences
- pivotal_workstation::keycastr
- pivotal_workstation::librsvg
- pivotal_workstation::locate_on
- pivotal_workstation::memcached
- pivotal_workstation::menubar_preferences
- pivotal_workstation::menumeters
- pivotal_workstation::mongodb
- pivotal_workstation::mouse_locator
- pivotal_workstation::mysql
- pivotal_workstation::nginx
- pivotal_workstation::node_js
- pivotal_workstation::pango
- pivotal_workstation::postgres
- pivotal_workstation::prince_xml
- pivotal_workstation::qt
- pivotal_workstation::rabbitmq
- pivotal_workstation::redis
- pivotal_workstation::rubymine
- pivotal_workstation::rubymine_preferences_pivotal
- pivotal_workstation::rvm
- pivotal_workstation::screen_sharing_app
- pivotal_workstation::sizeup
- pivotal_workstation::skype
- pivotal_workstation::sshd_on
- pivotal_workstation::ssl_certificate
- pivotal_workstation::sublime_text
- pivotal_workstation::textmate
- pivotal_workstation::textmate_bundles
- pivotal_workstation::textmate_preferences
- pivotal_workstation::tmux
- pivotal_workstation::unix_essentials
- pivotal_workstation::user_owns_usr_local
- pivotal_workstation::vagrant
- pivotal_workstation::vim
- pivotal_workstation::virtualbox
- pivotal_workstation::workspace_directory
- pivotal_workstation::xquartz
- pivotal_workstation::z
EOF
if [[ -d pivotal_workstation ]]; then
  cd pivotal_workstation &amp;&amp; git pull &amp;&amp; cd ..
else
  git clone https://github.com/pivotal/pivotal_workstation.git
fi
if [[ -d dmg ]]; then
  cd dmg &amp;&amp; git pull &amp;&amp; cd ..
else
  git clone https://github.com/opscode-cookbooks/dmg.git
fi
soloist
popd
</code></pre>

<p>I&#8217;m thinking of checking out this new tool from github called boxen, which uses puppet, and has similar end goal as soloist.  Though I imagine both of them will have the occasionally problem keeping up with bleeding edge of mac os releases.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[joshs software test]]></title>
    <link href="http://jmontross.github.com/blog/2013/02/14/joshs-software-test/"/>
    <updated>2013-02-14T16:52:00-08:00</updated>
    <id>http://jmontross.github.com/blog/2013/02/14/joshs-software-test</id>
    <content type="html"><![CDATA[<p>Inspired by Joel on Software I&#8217;d like to make my own little software test&#8230;
Ten items.  8 or better is acceptable.  Below 8 and reevaluate.</p>

<pre><code>The Josh Test (Don't josh me)

Do you use source control?
Can you make a build in one step?
Do you make daily builds?
Do you have a bug database?
Do you write tests for bugs before you fix them?
Are you using a kanban system to do work in the form of tickets?
Do you write tests for new tickets?
Do programmers have quiet working conditions?
Do you use the best tools money can buy?
Do new candidates write code during their interview?
</code></pre>

<p>Some additional ones that are more preferential and rightfully punish you for not having the prerequisite version control system&#8230;.</p>

<p>Does your process of using a version control system reference your tickets?
Can you tie the work for a desired feature to actual commits in a VCS?</p>

<p>Inspired and stolen in part from
http://www.joelonsoftware.com/articles/fog0000000043.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[given unsorted array and integer x part 3]]></title>
    <link href="http://jmontross.github.com/blog/2013/02/14/given-unsorted-array-and-integer-x-part-3/"/>
    <updated>2013-02-14T02:10:00-08:00</updated>
    <id>http://jmontross.github.com/blog/2013/02/14/given-unsorted-array-and-integer-x-part-3</id>
    <content type="html"><![CDATA[<p> After sending over my results from <a href="http://jmontross.github.com/blog/2013/01/26/given-unsorted-array-and-integer-x-part-2/"> part 2 </a> of the unsorted array and integer x problem, I got no response from this mysterious interviewer&#8230; and I imagined it&#8217;s because my solution without hashes was terribly inefficient.  It must be possible to solve this problem without hashes elegantly and more efficiently.</p>

<p> I&#8217;ve decided to go with a new solution where we sort the array from the start then build a list of the target answers, similarly to the building up of the hash, except we do this in constant time (I think) and keep our list tidy with only the minimal possible answers remaining in our sorted array of integers.</p>

<pre><code>def adds_to_x?(array,integer_x)
  answers = []
  array.sort
  array.each do |item|
    if answers.last == item
      return [integer_x - item, item]
    end
    answers &lt;&lt; (integer_x - item)

    while answers.first &amp;&amp; answers.first &lt; item
      answers.shift
    end
    if answers.first == item
      return [integer_x - item, item]
    end
  end
end

Benchmark.bmbm do |x|
   x.report { more_awesome unsorted_array,integer_x }
   x.report { awesome unsorted_array,integer_x }
   x.report { adds_to_x? unsorted_array,integer_x }

end
       user     system      total        real
       0.590000   0.000000   0.590000 (  0.601332)
       0.370000   0.010000   0.380000 (  0.367863)
       0.300000   0.000000   0.300000 (  0.297452)
</code></pre>

<p>We will look into just how efficient each of these algorithms are soon enough.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[algoirthm analysis]]></title>
    <link href="http://jmontross.github.com/blog/2013/02/14/algorithm-analysis/"/>
    <updated>2013-02-14T01:37:00-08:00</updated>
    <id>http://jmontross.github.com/blog/2013/02/14/algorithm-analysis</id>
    <content type="html"><![CDATA[<p>&#8220;Algorithms are the most important and durable part of computer science because
they can be studied in a language- and machine-independent way&#8221;</p>

<p>&#8220;It is traditional for the author to magnanimously accept the blame for whatever
deﬁciencies remain. I don’t. Any errors, deﬁciencies, or problems in this book are
somebody else’s fault, but I would appreciate knowing about them so as to determine who is to blame.&#8221;</p>

<p>These quotes come from the Algorithm Design Manual.  I just began reading it at the recommendation of a trusted and wise Sherif of the devbootcamp in San Francisco.  Best, Worst, and Average-Case Complexity => these are the ideas that the book describes nicely using graphs.  I&#8217;d like to get some pretty graphs of my three solutions to the unsorted array and integer x problem, and I need a nice way to make graphs on an X/Y plane in ruby&#8230; I&#8217;m thinking I&#8217;ll just use a js library</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[setting up something secret on heroku]]></title>
    <link href="http://jmontross.github.com/blog/2013/02/13/setting-up-something-secret-on-heroku/"/>
    <updated>2013-02-13T14:23:00-08:00</updated>
    <id>http://jmontross.github.com/blog/2013/02/13/setting-up-something-secret-on-heroku</id>
    <content type="html"><![CDATA[<p>I was wanting to run stripe on my new site www.karmagrove.com</p>

<p>I put the fake keys into my config file like a bad developer/ops person, which is of course a security problem because it&#8217;s an open source app.</p>

<p>So I add some new yaml file called strip.yaml to my config</p>

<pre><code>api_key: ENV['stripe_api_key']
public_key: ENV['stripe_public_key']
</code></pre>

<p>I create a new file called setup_heroku_keys.sh and add it to my git ignore.</p>

<pre><code>touch setup_heroku_keys.sh &amp;&amp; echo "setup_heroku_keys.sh" &gt;&gt; .gitignore
</code></pre>

<p>Then I add the following lines to my setup_heroku_keys.sh file</p>

<pre><code>heroku config:add STRIPE_API_KEY=sk_live_MY_SECRET
heroku config:add STRIPE_PUBLIC_KEY=pk_live_MY_PUBLISHABLE_KEY

bash setup_heroku_keys.sh

=&gt;
Setting config vars and restarting karma-grove... done, v16
STRIPE_API_KEY: sk_live_HIDDEN
Setting config vars and restarting karma-grove... done, v17
STRIPE_PUBLIC_KEY: pk_live_HIDDEN
</code></pre>

<p>I got this inspiration from the helpful heroku docs&#8230;
https://devcenter.heroku.com/articles/config-vars</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how to make inject method]]></title>
    <link href="http://jmontross.github.com/blog/2013/02/07/how-to-make-inject-method/"/>
    <updated>2013-02-07T18:31:00-08:00</updated>
    <id>http://jmontross.github.com/blog/2013/02/07/how-to-make-inject-method</id>
    <content type="html"><![CDATA[<p>This interviewer is like, what is your ruby skill on 1 to 10 and I&#8217;m like&#8230; I guess if Matz is 10 and newbie who just heard about ruby is 1, I&#8217;m like a 7.</p>

<p>He goes, okay, so what if we didn&#8217;t have the inject method, can you make it?</p>

<p>I&#8217;m thnking, this shouldn&#8217;t be so hard&#8230; I know how inject works.
It is an enumerable method that can have an initializer and takes a block, and returns a single value.  For instance</p>

<pre><code>[1,2].inject(1) { |initializer,item| initializer + item }
## first it comes across the item of 1 and ads 1 to it, then the result
## is 2, which is the initializer that is then added to 2, giving us
=&gt; 4
</code></pre>

<p>So now that we know how inject works, let&#8217;s implement it!</p>

<pre><code>def inject(initializer, &amp;block)
   # I think I'll need to store the initializer
   response = initializer
   self.each do |item|
     ## How do I yield to the block to build the response
     ## response = use_my_block(response,item)
   end
   response
end
</code></pre>

<p>I mention to the interviewer that I&#8217;m thining I am probably more like a 6 now&#8230;He chuckles and says many a time he&#8217;s taken a 7 down to a 4.  He asks me if I&#8217;ve heard of the yield method, which fixes my method_missing above</p>

<pre><code>def inject(initializer, &amp;block)
   response = initializer
   self.each do |item|
     response = yield response, item
   end
   response
end
</code></pre>

<p>And imagine that is inside the Array class&#8230;</p>

<p>To make it a little nicer and refactor a bit.</p>

<pre><code>class Array
  def inject(initializer, &amp;block)
   self.each do |item|
     initializer = yield initializer, item
   end
   initializer
  end
end
</code></pre>

<p>Let&#8217;s test it out and see if our new inject works the same as the real implementation that was shown at beginning&#8230;</p>

<pre><code>[1,2].inject(1) { |initializer,item| initializer + item }
=&gt; 4
</code></pre>
]]></content>
  </entry>
  
</feed>
